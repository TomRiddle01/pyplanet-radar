//Script for generating a clock in the pyplanet interface
#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

declare Vec3[][] paths;

declare Vec3 NoVec3;


Vec3 GetCurrentCp(Vec3[] CollectedCps) {
    if(CollectedCps.count != 0){
        return CollectedCps[CollectedCps.count-1];
    }
    return NoVec3;
}

Vec3[] GetNextCp(Vec3 CurrentCp) {
    log(CurrentCp);
    declare Vec3[] NextCp;

    declare take = 0;
    if(CurrentCp == NoVec3){
        take += 1;
    }

    foreach(path in paths){
        declare i = 0;
        foreach(cp in path){
            if(take > 0){
                if(!NextCp.exists(cp)){
                    NextCp.add(cp);
                }
                take -= 1;
                break;
            }
            if(CurrentCp == cp){
                take = 1;
            }
            i+=1;
        }
    }
    return NextCp;
}

Vec3 GetNearestWaypoint(Vec3 _PlayerPos) {
    declare Vec3 CheckpointPos;
    declare Real[Vec3] Distances;

    foreach (Pos in MapCheckpointPos) {
        Distances[Pos] = MathLib::Distance(_PlayerPos, Pos);
    }

    foreach (Pos in MapFinishLinePos) {
        Distances[Pos] = MathLib::Distance(_PlayerPos, Pos);
    }

    Distances = Distances.sort();

    foreach (Pos => Distance in Distances) {
        return Pos;
    }
    
    return Vec3;
}

Real Length(Vec2 v){
    return MathLib::Sqrt(v.X*v.X + v.Y*v.Y);
}

Vec2 TranslateToRadar(Vec3 to, CMlQuad Dot){
    declare velFactor = GUIPlayer.Speed/30.0;
    velFactor = MathLib::Abs(velFactor);
    velFactor = MathLib::Max(1.0, velFactor);
    velFactor = MathLib::Min(2.8, velFactor);

    declare zoom = 30*velFactor;
    declare radius = 15.0*zoom;
    declare dir = <GUIPlayer.AimDirection.X, GUIPlayer.AimDirection.Z>;
    declare north = <0.0, 1.0>;
    declare a =  -(MathLib::Atan2(dir.Y, dir.X) - MathLib::Atan2(north.Y, north.X));
    declare rel = to-GUIPlayer.Position;

    declare pos = <rel.X*MathLib::Cos(a) - rel.Z*MathLib::Sin(a), rel.X*MathLib::Sin(a) + rel.Z*MathLib::Cos(a)>;
    declare l = Length(pos);
    declare Vec2 norm;
    if(l != 0){
        norm = <pos.X/l, pos.Y/l>;
    }else{
        norm = pos;
    }
    Dot.Opacity = 1-MathLib::Min(l, 2000.0)/2000.0;

    declare d = MathLib::Min(radius, l);
    return <-norm.X*d/zoom, norm.Y*d/zoom>;
}


main() {

    declare persistent Vec3[] CollectedCps;
    declare persistent Integer RadarPos;

    NoVec3 = <992992.,929929.,39939.>;


    {% for path in paths %}
    paths.add([{{path|safe}}]);
    {% endfor %}

    while (True) {
        yield;

        if (!PageIsVisible || GUIPlayer == Null) {
            continue;
        }

        if(GUIPlayer.CurRace.Checkpoints.count == 0) {
            CollectedCps = Vec3[];
        }


        if (!PageIsVisible || InputPlayer == Null) {
            continue;
        }


        for(i, 0, 499){
            declare CMlQuad Dot <=> (Page.GetFirstChild("dot_"^i) as CMlQuad);
            Dot.Opacity = 1.0;
            Dot.RelativeScale = 1.0;
            Dot.Hide();
            Dot.BgColor = <1.,1.,1.>;
        }

        declare i = 0;
        foreach(Player in Players){
                declare CMlQuad Dot <=> (Page.GetFirstChild("dot_"^i) as CMlQuad);
                declare pos = TranslateToRadar(Player.Position, Dot);
                Dot.RelativePosition_V3 = pos;
                Dot.BgColor = <0.0, 0.45, 1.0>;
                Dot.RelativeScale = 0.8;
                Dot.Show();
                i += 1;
            if(Player != GUIPlayer){
            }
        }


        declare NextCp = GetNextCp(GetCurrentCp(CollectedCps));

        foreach (Checkpoint in MapCheckpointPos) {
            declare CMlQuad Dot <=> (Page.GetFirstChild("dot_"^i) as CMlQuad);
            declare pos = TranslateToRadar(Checkpoint, Dot);
            Dot.RelativePosition_V3 = pos;
            Dot.BgColor = <0.5,0.5,0.5>;
            Dot.Show();

            if(NextCp.exists(Checkpoint)){
                if(NextCp.count > 1){
                    Dot.BgColor = <1.,0.6,0.>;
                }else{
                    Dot.BgColor = <1.,1.,0.>;
                }
                Dot.RelativeScale = 1.3;
                Dot.Opacity = 1.0;
            }
            if(CollectedCps.exists(Checkpoint)){
                Dot.BgColor = <0.5,0.5,1.0>;
                Dot.Opacity *= 0.5;
                Dot.RelativeScale = 0.4;
            }
            i += 1;
        }

        foreach (Checkpoint in MapFinishLinePos) {
            declare CMlQuad Dot <=> (Page.GetFirstChild("dot_"^i) as CMlQuad);
            declare pos = TranslateToRadar(Checkpoint, Dot);
            Dot.RelativePosition_V3 = pos;
            Dot.BgColor = <1.,0.,0.>;
            Dot.Show();

            if(CollectedCps.count == MapCheckpointPos.count){
                Dot.RelativeScale = 1.3;
                Dot.Opacity = 1.0;
            }

            if(CollectedCps.exists(Checkpoint)){
                Dot.Opacity *= 0.5;
                Dot.RelativeScale = 0.5;
            }
            i += 1;
        }







        declare Vec3[] RadarSettings;
        RadarSettings.add(<-33.0,-70.0, 1.2>); // left (left of time, behind chat)
        RadarSettings.add(<0.0,-60.0, 1.0>); // centered (over time)
        RadarSettings.add(<113.0,-70.0, 1.0>); // bottom right
        RadarSettings.add(<105.0,70.0, 1.2>); // top right
        //RadarSettings.add(<120.0,85.0, 0.3>); // top right (mini)

        declare CMlFrame frame <=> (Page.GetFirstChild("radarframe") as CMlFrame);
        frame.RelativePosition_V3.X = RadarSettings[RadarPos % RadarSettings.count].X;
        frame.RelativePosition_V3.Y = RadarSettings[RadarPos % RadarSettings.count].Y;
        frame.RelativeScale = RadarSettings[RadarPos % RadarSettings.count].Z;


        foreach(Event in PendingEvents){
            if(Event.Type == CMlScriptEvent::Type::MouseClick){
                if(Event.ControlId == "radar"){
                    RadarPos = (RadarPos+1) % RadarSettings.count;
                }
            }
        }

        foreach (Event in RaceEvents) {
            if (Event.Type == CTmRaceClientEvent::EType::WayPoint){
                if(Event.Player == InputPlayer){
                    declare Vec3 NextCheckpoint = GetNearestWaypoint(Event.Player.Position);
                    CollectedCps.add(NextCheckpoint);


                    //FormattedCheckpoint = TextLib::ToText(NextCheckpoint.X)
                    //                      ^"_"^TextLib::ToText(NextCheckpoint.Y)
                    //                      ^"_"^TextLib::ToText(NextCheckpoint.Z);
                    //FormattedCheckpointNb = TextLib::ToText(Event.CheckpointInRace);

                    //TriggerPageAction("{{id}}__checkpoint__"^FormattedCheckpoint^"|"^FormattedCheckpointNb);
                }
            }
        }
    }
}

